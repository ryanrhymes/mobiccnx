.TH "sync/SyncActions.h" 3 "21 Aug 2012" "Version 0.6.1" "Content-Centric Networking in C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sync/SyncActions.h \- 
.PP
Part of CCNx Sync.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBSyncActionData\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSyncRegisterActionKind\fP { \fBSRI_Kind_None\fP, \fBSRI_Kind_AdviseInt\fP, \fBSRI_Kind_FetchInt\fP, \fBSRI_Kind_RootAdvise\fP, \fBSRI_Kind_NodeFetch\fP, \fBSRI_Kind_RootStats\fP, \fBSRI_Kind_Content\fP }"
.br
.ti -1c
.RI "enum \fBSyncActionState\fP { \fBSyncActionState_init\fP, \fBSyncActionState_sent\fP, \fBSyncActionState_loose\fP, \fBSyncActionState_error\fP, \fBSyncActionState_done\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBSyncStartSliceEnum\fP (struct \fBSyncRootStruct\fP *root)"
.br
.RI "\fIstarts a slice enumeration for the root \fP"
.ti -1c
.RI "int \fBSyncStartHeartbeat\fP (struct \fBSyncBaseStruct\fP *base)"
.br
.RI "\fIstarts a periodic wakeup that maintains state across all roots \fP"
.ti -1c
.RI "int \fBSyncStartNodeFetch\fP (struct \fBSyncRootStruct\fP *root, struct \fBSyncHashCacheEntry\fP *ce, struct SyncCompareData *comp)"
.br
.RI "\fIstarts a remote fetch of the given node, based on the hash comp may be NULL if this is not for a compare \fP"
.ti -1c
.RI "int \fBSyncStartContentFetch\fP (struct \fBSyncRootStruct\fP *root, struct \fBccn_charbuf\fP *name, struct SyncCompareData *comp)"
.br
.RI "\fIstarts a remote fetch of the given name comp may be NULL if this is not for a compare \fP"
.ti -1c
.RI "int \fBSyncAddName\fP (struct \fBSyncBaseStruct\fP *base, struct \fBccn_charbuf\fP *name, \fBccnr_accession\fP item)"
.br
.RI "\fIAdds the given name to any applicable roots. \fP"
.ti -1c
.RI "int \fBSyncHandleSlice\fP (struct \fBSyncBaseStruct\fP *base, struct \fBccn_charbuf\fP *name)"
.br
.RI "\fICreates a new slice from a full name. \fP"
.ti -1c
.RI "int \fBSyncRegisterInterests\fP (struct \fBSyncRootStruct\fP *root)"
.br
.RI "\fIregisters interests associated with the given root these include C1.S.RA (Root Advise) and C1.S.NF (Node Fetch) interests additional interests may be registered as the protocol evolves \fP"
.ti -1c
.RI "int \fBSyncSendRootAdviseInterest\fP (struct \fBSyncRootStruct\fP *root)"
.br
.RI "\fIsend a root advise request for the given root only one at a time may be outstanding \fP"
.ti -1c
.RI "int \fBSyncUpdateRoot\fP (struct \fBSyncRootStruct\fP *root)"
.br
.RI "\fIupdates the root with the current root->namesToAdd \fP"
.ti -1c
.RI "int \fBSyncStartCompareAction\fP (struct \fBSyncRootStruct\fP *root, struct \fBccn_charbuf\fP *hashR)"
.br
.RI "\fIinitiates a compare action with the given remote hash \fP"
.in -1c
.SH "Detailed Description"
.PP 
Part of CCNx Sync. 

This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License version 2.1 as published by the Free Software Foundation. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. 
.PP
Definition in file \fBSyncActions.h\fP.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSyncActionState\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fISyncActionState_init \fP\fP
.TP
\fB\fISyncActionState_sent \fP\fP
.TP
\fB\fISyncActionState_loose \fP\fP
.TP
\fB\fISyncActionState_error \fP\fP
.TP
\fB\fISyncActionState_done \fP\fP

.PP
Definition at line 39 of file SyncActions.h.
.SS "enum \fBSyncRegisterActionKind\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fISRI_Kind_None \fP\fP
.TP
\fB\fISRI_Kind_AdviseInt \fP\fP
root advise handler 
.TP
\fB\fISRI_Kind_FetchInt \fP\fP
node fetch handler 
.TP
\fB\fISRI_Kind_RootAdvise \fP\fP
root advise request 
.TP
\fB\fISRI_Kind_NodeFetch \fP\fP
node fetch request 
.TP
\fB\fISRI_Kind_RootStats \fP\fP
root stats request 
.TP
\fB\fISRI_Kind_Content \fP\fP
general content 
.PP
Definition at line 29 of file SyncActions.h.
.SH "Function Documentation"
.PP 
.SS "int SyncAddName (struct \fBSyncBaseStruct\fP * base, struct \fBccn_charbuf\fP * name, \fBccnr_accession\fP item)"
.PP
Adds the given name to any applicable roots. Use item == 0 to ignore accession number. 
.PP
\fBReturns:\fP
.RS 4
< 0 for failure, number of additions to roots for success. 
.RE
.PP

.PP
Definition at line 855 of file ccn_sync.c.
.PP
Referenced by SyncNotifyContent(), and SyncStartContentFetch().
.SS "int SyncHandleSlice (struct \fBSyncBaseStruct\fP * base, struct \fBccn_charbuf\fP * name)"
.PP
Creates a new slice from a full name. The name must start with base->priv->sliceCmdPrefix. 
.PP
\fBReturns:\fP
.RS 4
< 0 if an error occurred, otherwise the new root number. 
.RE
.PP

.PP
Definition at line 2481 of file ccn_sync.c.
.PP
Referenced by SyncNotifyContent().
.SS "int SyncRegisterInterests (struct \fBSyncRootStruct\fP * root)"
.PP
registers interests associated with the given root these include C1.S.RA (Root Advise) and C1.S.NF (Node Fetch) interests additional interests may be registered as the protocol evolves \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for success 
.RE
.PP

.PP
Definition at line 2445 of file ccn_sync.c.
.PP
Referenced by SyncAddRoot().
.SS "int SyncSendRootAdviseInterest (struct \fBSyncRootStruct\fP * root)"
.PP
send a root advise request for the given root only one at a time may be outstanding \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for OK 
.RE
.PP

.PP
Definition at line 3218 of file SyncActions.c.
.PP
Referenced by HeartbeatAction(), and UpdateAction().
.SS "int SyncStartCompareAction (struct \fBSyncRootStruct\fP * root, struct \fBccn_charbuf\fP * hashR)"
.PP
initiates a compare action with the given remote hash \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for OK 
.RE
.PP

.PP
Definition at line 2206 of file ccn_sync.c.
.PP
Referenced by HeartbeatAction(), and SyncRootAdviseResponse().
.SS "int SyncStartContentFetch (struct \fBSyncRootStruct\fP * root, struct \fBccn_charbuf\fP * name, struct SyncCompareData * comp)"
.PP
starts a remote fetch of the given name comp may be NULL if this is not for a compare \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for success 
.RE
.PP

.PP
Definition at line 2225 of file SyncActions.c.
.PP
Referenced by CompareAction().
.SS "int SyncStartHeartbeat (struct \fBSyncBaseStruct\fP * base)"
.PP
starts a periodic wakeup that maintains state across all roots \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for success 
.RE
.PP

.PP
Definition at line 2491 of file ccn_sync.c.
.PP
Referenced by SyncInit().
.SS "int SyncStartNodeFetch (struct \fBSyncRootStruct\fP * root, struct \fBSyncHashCacheEntry\fP * ce, struct SyncCompareData * comp)"
.PP
starts a remote fetch of the given node, based on the hash comp may be NULL if this is not for a compare \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for success 
.RE
.PP

.PP
Definition at line 1646 of file ccn_sync.c.
.PP
Referenced by doComparison(), and doPreload().
.SS "int SyncStartSliceEnum (struct \fBSyncRootStruct\fP * root)"
.PP
starts a slice enumeration for the root \fBReturns:\fP
.RS 4
< 0 for error, 0 if some enumeration is busy, 1 for success 
.RE
.PP

.PP
Definition at line 2486 of file ccn_sync.c.
.PP
Referenced by HeartbeatAction(), and SyncNotifyContent().
.SS "int SyncUpdateRoot (struct \fBSyncRootStruct\fP * root)"
.PP
updates the root with the current root->namesToAdd \fBReturns:\fP
.RS 4
< 0 for error, >= 0 for OK 
.RE
.PP

.PP
Definition at line 3873 of file SyncActions.c.
.PP
Referenced by HeartbeatAction(), and testReadBuilder().
.SH "Author"
.PP 
Generated automatically by Doxygen for Content-Centric Networking in C from the source code.
